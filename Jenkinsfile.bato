pipeline {
    agent any
    environment { 
        PROJECT_NAME="BATO"

// Update maven and credentials if needed
        MVN_HOME="/var/lib/apache-maven-3.3.9"
	AEM_ADMIN_CREDS="37af17ae-ef7a-48d1-be68-53139418b3d9"
	GIT_CREDS="f493b70e-1d29-4096-8167-caedb0cc686b"
	BATO_GIT_CREDS="13bc238a-8b92-4409-adc4-8941b4a42a48"

// Stage dirs
        MS_WAR_STAGE="/opt/projects/bsro-builds/bsro-releases/b2o-ci-prod-ep/assets/microservices"
	AUTOMATION_STAGE="/opt/projects/bsro/automation"

	BATO_BRANCH="AEM6.3-Implementation"
        MICROSERV_BRANCH="DEV_MICROSERV_THAC"
        ADMIN_BRANCH="ADMIN_DEV"
	EC_BRANCH="DEV_OSGI"
	OSGI_BRANCH="DEV_OSGI"
	MODES_BRANCH="DEV_OSGI"
	WORKFLOW_BRANCH="DEV_OSGI"
	UI_BRANCH="DEV_UI"
	TOOLS_BRANCH="TOOLS-RELEASES-THAC" 
	GLOBAL_PKG_DESTINATION="/mnt/apps/bsro/assets/content/global"
	DOCKER_IMAGE_NAME="b2o-ci-prod-ep"
	DOCKER_CONTAINER_NAME="B2O_EP"
	DOCKER_AUTHOR_VOLUME_DIR="/mnt/data2/dockervolume/workspace"
        DOCKER_PUBLISH_VOLUME_DIR="/mnt/data3/dockervolume/workspace"
	EXPORT_TAR_DIR="/mnt/data2/dockervolume/workspace"
	HOST="bsro-tools.icrossing.com"
	A_PORT="4502"
	P_PORT="4503"

// UI_HOTFIX_V1 variable
	LAST_COMMIT="11251bdc2"
	DATE="20180502"

// CONTENT_HOTFIX variables
	CONTENT_HOTFIX_VERSION="1.1.14_20180502"
	CONTENT_HOTFIX_PKGNAME="bsro-content-hotfix-$CONTENT_HOTFIX_VERSION"

// TEST SITES
	BSRO_FCAC_URL="https://bsro-fcac-tools.icrossing.com"	
    	BSRO_TP_URL="https://bsro-tp-tools.icrossing.com"
	BSRO_HT_URL="https://bsro-ht-tools.icrossing.com"
	BSRO_WWT_URL="https://bsro-wwt-tools.icrossing.com" 
    }
/*
    tools { 
        maven 'Maven 3.3.9' 
        jdk 'jdk8' 
    }
*/

    stages {
/******************************
        stage('Stage 1: Build Microservices') {
            steps {
                git branch: env.MICROSERV_BRANCH, credentialsId: env.GIT_CREDS,
                     url: 'https://inesvit@git.icrossing.net/web-development/bsro.git'
		sh '''
                  $MVN_HOME/bin/mvn -f $WORKSPACE/Micro_Services/pom.xml clean install -P jar
                  $MVN_HOME/bin/mvn -f $WORKSPACE/Micro_Services/pom.xml clean install -P war

                  [ -d $MS_WAR_STAGE ] || mkdir -p $MS_WAR_STAGE
		  find $WORKSPACE/Micro_Services/* -name "appt-1.*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "battery-1.*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "contact-1.*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "proxy-1.*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "promo-1.*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "stores-1.*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "tires-1.*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "vis-1.*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "alignment-1.*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "ecomm-stores-1.*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "voice-*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		  find $WORKSPACE/Micro_Services/* -name "login-*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		'''
            }
        }
        stage('Stage 2: Build Admin WebApp') {
            steps {
		deleteDir()
                git branch: env.ADMIN_BRANCH, credentialsId: env.GIT_CREDS,
                             url: 'https://inesvit@git.icrossing.net/web-development/bsro-admin.git'
		sh '''
		  $MVN_HOME/bin/mvn -f $WORKSPACE/BSROAdmin/pom.xml clean install
		  find $WORKSPACE/BSROAdmin/target/* -name "BSROAdmin*.war" -execdir /bin/cp {} $MS_WAR_STAGE \\;
		'''
            }
        }
        stage('Stage 3: Package and copy global packages') {
            steps {
		sh '[ -d $GLOBAL_PKG_DESTINATION ] || mkdir -p $GLOBAL_PKG_DESTINATION'
// Build EC
// Cleanup workspace
                deleteDir()
                git branch: env.EC_BRANCH, credentialsId: env.GIT_CREDS,
                             url: 'https://inesvit@git.icrossing.net/web-development/bsro.git'
		sh '$MVN_HOME/bin/mvn -f $WORKSPACE/AEM_Components/pom.xml clean package  -P ec'
                sh 'cp $WORKSPACE/AEM_Components/bsro-aem-ui/bsro-ec/target/bsro-ec-*.zip $GLOBAL_PKG_DESTINATION'
// Build Modes
// Cleanup workspace
                deleteDir()
                git branch: env.MODES_BRANCH, credentialsId: env.GIT_CREDS,
                             url: 'https://inesvit@git.icrossing.net/web-development/bsro.git'
  		sh '$MVN_HOME/bin/mvn -f $WORKSPACE/AEM_Components/pom.xml clean package  -P modes'
                sh 'cp $WORKSPACE/AEM_Components/bsro-aem-ui/bsro-modes/target/bsro-modes-*.zip $GLOBAL_PKG_DESTINATION'
  
// Build Workflow 
// Cleanup workspace
                deleteDir()
                git branch: env.WORKFLOW_BRANCH, credentialsId: env.GIT_CREDS,
                             url: 'https://inesvit@git.icrossing.net/web-development/bsro.git'
   		sh '$MVN_HOME/bin/mvn -f $WORKSPACE/AEM_Components/pom.xml clean package -P workflow'
   		sh 'cp $WORKSPACE/AEM_Components/bsro-aem-ui/bsro-workflow/target/bsro-workflow-*.zip $GLOBAL_PKG_DESTINATION'
    
// Build OSGi
// Cleanup workspace
                deleteDir()
                git branch: env.OSGI_BRANCH, credentialsId: env.GIT_CREDS,
                             url: 'https://inesvit@git.icrossing.net/web-development/bsro.git'
        	sh '$MVN_HOME/bin/mvn -f $WORKSPACE/AEM_Components/pom.xml clean package   -P osgi'
        	sh 'cp $WORKSPACE/AEM_Components/bsro-aem-ui/bsro-osgi/target/bsro-osgi-*.zip $GLOBAL_PKG_DESTINATION'
            }
        }
        stage('Stage 4: Build global UI') {
            steps {
               	deleteDir()
               	git branch: env.UI_BRANCH, credentialsId: env.GIT_CREDS,
                             url: 'https://inesvit@git.icrossing.net/web-development/bsro.git'
               	sh '$MVN_HOME/bin/mvn -f $WORKSPACE/AEM_Components/pom.xml clean package   -P ui'
		sh 'cp $WORKSPACE/AEM_Components/bsro-aem-ui/target/bsro-ui-*.zip $GLOBAL_PKG_DESTINATION'
            }
        }
        stage('Stage 5: Build EP docker image') {
            steps {
                deleteDir()
                git branch: env.TOOLS_BRANCH, credentialsId: env.GIT_CREDS,
                             url: 'https://inesvit@git.icrossing.net/web-development/bsro-releases.git'
		sh '''
		  set +x

		  # Stage automation scripts for later use
		  [ -d $AUTOMATION_STAGE ] || mkdir -p $AUTOMATION_STAGE
		  cp $WORKSPACE/automation/* $AUTOMATION_STAGE

		  cp -r $MS_WAR_STAGE $WORKSPACE/b2o-ci-prod-ep/assets/
		  cd $WORKSPACE/b2o-ci-prod-ep
		  docker build --tag="$DOCKER_IMAGE_NAME" -f Dockerfile.63sp1 .
		  
		  CONTAINER_ID=`docker run --name $DOCKER_CONTAINER_NAME -i -d -p 4502-4503:4502-4503 -p 8080:8080 -p 81:80 -p 71:71 --add-host shop-bsro-fcac-pr.firestonecompleteautocare.com:63.137.180.2 $DOCKER_IMAGE_NAME`
		  sleep 60

		'''

            }
        }
        stage('Stage 6: Beaming the content for AUTH and PUB') {
            steps {
		parallel(
        	  author: {
			withCredentials([usernameColonPassword(credentialsId: env.AEM_ADMIN_CREDS, variable: 'USERPASS')]) {
    			  sh '''
			  set +x
			  $AUTOMATION_STAGE/beam_packages_a_bato.sh
    			  '''
			}
		  },
		  publish: {
                        withCredentials([usernameColonPassword(credentialsId: env.AEM_ADMIN_CREDS, variable: 'USERPASS')]) {
                          sh '''
                          set +x
                          $AUTOMATION_STAGE/beam_packages_p_bato.sh
                          '''
                        }
		  }
		)
            }
        }
**********************/
        stage('Stage 7: Copy repo') {
            steps {
		sh '''
		  echo "Copying author launchpad..."

		  # Remove existing author launchpad and reposotory folders, if any
		  rm -rf $DOCKER_AUTHOR_VOLUME_DIR/author/*

		  docker cp $DOCKER_CONTAINER_NAME:/opt/aem/author/crx-quickstart/launchpad $DOCKER_AUTHOR_VOLUME_DIR/author/launchpad
		  echo "Copying author repository..."
		  docker cp $DOCKER_CONTAINER_NAME:/opt/aem/author/crx-quickstart/repository $DOCKER_AUTHOR_VOLUME_DIR/author/repository

		  # Remove existing publish launchpad and reposotory folders, if any
		  rm -rf $DOCKER_PUBLISH_VOLUME_DIR/publish/*

		  echo "Copying publish launchpad..."
		  docker cp $DOCKER_CONTAINER_NAME:/opt/aem/publish/crx-quickstart/launchpad $DOCKER_PUBLISH_VOLUME_DIR/publish/launchpad

		  echo "Copying publish repository..."
		  docker cp $DOCKER_CONTAINER_NAME:/opt/aem/publish/crx-quickstart/repository $DOCKER_PUBLISH_VOLUME_DIR/publish/repository

		'''
            }
        }
        stage('Stage 8: Build BSRO docker volumes for AUTH and PUB') {
            steps {
                parallel(
                  author: {
		    sh '''
                      # Copy pre-staged Dockerfile.author for author volume image
                      cp $AUTOMATION_STAGE/Dockerfile.author $DOCKER_AUTHOR_VOLUME_DIR
                      cd $DOCKER_AUTHOR_VOLUME_DIR
                      echo "Building author volume image..."
                      docker build --tag="bato-ci-lite-arepo63-ms" -f Dockerfile.author .
		    '''
                  },
                  publish: {
		    sh '''
                      # Copy pre-staged Dockerfile.publish for publish volume image
                      cp $AUTOMATION_STAGE/Dockerfile.publish $DOCKER_PUBLISH_VOLUME_DIR
                      cd $DOCKER_PUBLISH_VOLUME_DIR
                      echo "Building publish volume image..."
                      docker build --tag="bato-ci-lite-prepo63-ms" -f Dockerfile.publish .
		    '''
                  }
		)
	    }
	}

/*********************
        stage('Stage 9: BST-FST-MASTER') {
            steps {
                deleteDir()
                git branch: env.BATO_BRANCH, credentialsId: env.BATO_GIT_CREDS,
                     url: 'https://iCrossingBATONotifications@github.com/Razorfish-East/BATO.git'
                sh '''
		'''
	    }
	}
*************************/
        stage('Stage 10: Build docker master image') {
            steps {
		sh '''
		  echo "Indexing and deleting launchpad/repository from AUTHOR and PUBLISH";
		  docker exec -i $DOCKER_CONTAINER_NAME /opt/aem/prep-ms.sh /opt/aem author
		  docker exec -i $DOCKER_CONTAINER_NAME /opt/aem/prep-ms.sh /opt/aem publish

		  #Remove any existing export tar files
		  rm -rf $EXPORT_TAR_DIR/b2o-ci-prod-master-ms63.tar

		  docker export -o $EXPORT_TAR_DIR/b2o-ci-prod-master-ms63.tar $DOCKER_CONTAINER_NAME

		  echo "Importing image (TAR) to local repo --begin"

		  cat $EXPORT_TAR_DIR/b2o-ci-prod-master-ms63.tar | docker import -  b2o-ci-prod-master-ms63:latest

		  docker stop $DOCKER_CONTAINER_NAME
		  docker rm -f $DOCKER_CONTAINER_NAME
		'''
            }
        }
/*****************
        stage('Stage 11: Bring up docker container and create volumes') {
            steps {
		  sh '''
		    PATH=$PATH:/usr/local/bin
		    export COMPOSE_HTTP_TIMEOUT=3600
		    docker-compose -f $AUTOMATION_STAGE/docker-compose-bato.yml up -d
		  '''
	    }
	}
        stage('Stage 12: Run Smoke Test') {
            steps {
                echo 'Stage 13: Fire up tests against all the sites'
		sh '''
		  sleep 15
		  URL=$BSRO_FCAC_URL
		  HTTP_STATUS=$(curl -IL --silent $URL | grep HTTP | cut -d ' ' -f 2)
		  if [[ $HTTP_STATUS = 200 ]] ; then
		    echo "Test for $URL 	PASSED"
		  else
		    echo "Test for $URL 	FAILED"  
		    exit 1
		  fi

                  URL=$BSRO_TP_URL
                  HTTP_STATUS=$(curl -IL --silent $URL | grep HTTP | cut -d ' ' -f 2)
                  if [[ $HTTP_STATUS = 200 ]] ; then
                    echo "Test for $URL         PASSED"
                  else
                    echo "Test for $URL         FAILED"
                    exit 1
                  fi

                  URL=$BSRO_HT_URL
                  HTTP_STATUS=$(curl -IL --silent $URL | grep HTTP | cut -d ' ' -f 2)
                  if [[ $HTTP_STATUS = 200 ]] ; then
                    echo "Test for $URL         PASSED"
                  else
                    echo "Test for $URL         FAILED"
                    exit 1
                  fi

                  URL=$BSRO_WWT_URL
                  HTTP_STATUS=$(curl -IL --silent $URL | grep HTTP | cut -d ' ' -f 2)
                  if [[ $HTTP_STATUS = 200 ]] ; then
                    echo "Test for $URL         PASSED"
                  else
                    echo "Test for $URL         FAILED"
                    exit 1
                  fi
		'''
            }
        }
        stage('Stage 14: Push docker image to the repository') {
            steps {
                echo 'Stage 14: Push a newly built docker image to the repository'
            }
        }
**************/
    }
    post {
        always {
            echo 'Pipeline finished'
        }
        success {
            echo 'Succeeeded!'
        }
        unstable {
            echo 'Unstable :/'
        }
        failure {
            echo 'Failed :('
        }
        changed {
            echo 'Changes were made to the pipeline...'
        }
    }
}
